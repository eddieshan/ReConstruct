namespace ReConstruct.Geometry

open System

module internal DualContouringTables =

    let QuadsTraversal = [|
        [| [|0; 0; 0; |]; [|1; 0; 0; |]; [|0; 1; 0; |]; [|0; 1; 0; |]; [|1; 0; 0; |]; [|1; 1; 0; |]; |] // Left face
        [| [|0; 0; 0; |]; [|1; 0; 0; |]; [|0; 0; 1; |]; [|1; 0; 0; |]; [|0; 0; 1; |]; [|1; 0; 1; |]; |] // Top face
        [| [|0; 0; 0; |]; [|0; 0; 1; |]; [|0; 1; 0; |]; [|0; 0; 1; |]; [|0; 1; 0; |]; [|0; 1; 1; |]; |] // Front face
    |]

    let QuadContributions = 
        [|[||]; [|0|]; [|0; 2; 1|]; [|2; 1|]; [|2|]; [|0; 2|]; [|0; 1|]; [|1|]; [||];
        [|0|]; [|0; 2; 1|]; [|2; 1|]; [|2|]; [|0; 2|]; [|0; 1|]; [|1|]; [||];
        [|0|]; [|0; 2; 1|]; [|2; 1|]; [|2|]; [|0; 2|]; [|0; 1|]; [|1|]; [||];
        [|0|]; [|0; 2; 1|]; [|2; 1|]; [|2|]; [|0; 2|]; [|0; 1|]; [|1|]; [|1|];
        [|0; 1|]; [|0; 2|]; [|2|]; [|2; 1|]; [|0; 2; 1|]; [|0|]; [||]; [|1|];
        [|0; 1|]; [|0; 2|]; [|2|]; [|2; 1|]; [|0; 2; 1|]; [|0|]; [||]; [|1|];
        [|0; 1|]; [|0; 2|]; [|2|]; [|2; 1|]; [|0; 2; 1|]; [|0|]; [||]; [|1|];
        [|0; 1|]; [|0; 2|]; [|2|]; [|2; 1|]; [|0; 2; 1|]; [|0|]; [||]; [||]; [|0|];
        [|0; 2; 1|]; [|2; 1|]; [|2|]; [|0; 2|]; [|0; 1|]; [|1|]; [||]; [|0|];
        [|0; 2; 1|]; [|2; 1|]; [|2|]; [|0; 2|]; [|0; 1|]; [|1|]; [||]; [|0|];
        [|0; 2; 1|]; [|2; 1|]; [|2|]; [|0; 2|]; [|0; 1|]; [|1|]; [||]; [|0|];
        [|0; 2; 1|]; [|2; 1|]; [|2|]; [|0; 2|]; [|0; 1|]; [|1|]; [|1|]; [|0; 1|];
        [|0; 2|]; [|2|]; [|2; 1|]; [|0; 2; 1|]; [|0|]; [||]; [|1|]; [|0; 1|];
        [|0; 2|]; [|2|]; [|2; 1|]; [|0; 2; 1|]; [|0|]; [||]; [|1|]; [|0; 1|];
        [|0; 2|]; [|2|]; [|2; 1|]; [|0; 2; 1|]; [|0|]; [||]; [|1|]; [|0; 1|];
        [|0; 2|]; [|2|]; [|2; 1|]; [|0; 2; 1|]; [|0|]; [||]; [||]; [|0|];
        [|0; 2; 1|]; [|2; 1|]; [|2|]; [|0; 2|]; [|0; 1|]; [|1|]; [||]; [|0|];
        [|0; 2; 1|]; [|2; 1|]; [|2|]; [|0; 2|]; [|0; 1|]; [|1|]; [||]; [|0|];
        [|0; 2; 1|]; [|2; 1|]; [|2|]; [|0; 2|]; [|0; 1|]; [|1|]; [||]; [|0|];
        [|0; 2; 1|]; [|2; 1|]; [|2|]; [|0; 2|]; [|0; 1|]; [|1|]; [|1|]; [|0; 1|];
        [|0; 2|]; [|2|]; [|2; 1|]; [|0; 2; 1|]; [|0|]; [||]; [|1|]; [|0; 1|];
        [|0; 2|]; [|2|]; [|2; 1|]; [|0; 2; 1|]; [|0|]; [||]; [|1|]; [|0; 1|];
        [|0; 2|]; [|2|]; [|2; 1|]; [|0; 2; 1|]; [|0|]; [||]; [|1|]; [|0; 1|];
        [|0; 2|]; [|2|]; [|2; 1|]; [|0; 2; 1|]; [|0|]; [||]; [||]; [|0|];
        [|0; 2; 1|]; [|2; 1|]; [|2|]; [|0; 2|]; [|0; 1|]; [|1|]; [||]; [|0|];
        [|0; 2; 1|]; [|2; 1|]; [|2|]; [|0; 2|]; [|0; 1|]; [|1|]; [||]; [|0|];
        [|0; 2; 1|]; [|2; 1|]; [|2|]; [|0; 2|]; [|0; 1|]; [|1|]; [||]; [|0|];
        [|0; 2; 1|]; [|2; 1|]; [|2|]; [|0; 2|]; [|0; 1|]; [|1|]; [|1|]; [|0; 1|];
        [|0; 2|]; [|2|]; [|2; 1|]; [|0; 2; 1|]; [|0|]; [||]; [|1|]; [|0; 1|];
        [|0; 2|]; [|2|]; [|2; 1|]; [|0; 2; 1|]; [|0|]; [||]; [|1|]; [|0; 1|];
        [|0; 2|]; [|2|]; [|2; 1|]; [|0; 2; 1|]; [|0|]; [||]; [|1|]; [|0; 1|];
        [|0; 2|]; [|2|]; [|2; 1|]; [|0; 2; 1|]; [|0|]; [||]|]

    /// Do not remove the commented code below.
    /// It contains ancillary functions and lookups to generate the edge and quad contribution indices.
    /// The functions edgeContributions() and quadContributions() are run in the F# interpreter to generate
    /// static array definitions of EdgeContributions and QuadContributions so they get primed in compile time.
    /// TODO: consider if it would be better to initialize these indices during startup.

    //let XYZEdges = [| 
    //    [| 1 <<< 0; 0; |]; //(0, 1) -> 0, x axis edge.
    //    [| 1 <<< 9; 1; |]; //(1, 5) -> 9, y axis edge.
    //    [| 1 <<< 1; 2; |]; //(1, 2) -> 1, z axis edge.
    //|]

    //let axisEdges = [| 
    //    [| 0; 0; |]; //(0, 1) -> 0, x axis edge.
    //    [| 9; 1; |]; //(1, 5) -> 9, y axis edge.
    //    [| 1; 2; |]; //(1, 2) -> 1, z axis edge.
    //|]

    //let axisEdge n = axisEdges |> Array.tryFind(fun e -> e.[0] = n) |> Option.map(fun e -> e.[1])        

    //let quadContributions() = EdgeContributions |> Array.map(Array.choose axisEdge)
